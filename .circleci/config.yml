version: 2.1

workflows:
  version: 2
  circleci-build:
    jobs:
      - azlint
      - lint
      - build-web
      - build-api
      - build-api2

  deploy:
    jobs:
      - deploy-api2:
          filters:
            branches:
              only: master

  cron:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - prod-check

jobs:
  azlint:
    docker:
      - image: matejkosiarcik/azlint
    steps:
      - checkout
      - setup_remote_docker
      - run: azlint

  lint:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install --yes --no-install-recommends build-essential curl ruby ruby-dev zlib1g zlib1g-dev
          curl -sL https://deb.nodesource.com/setup_14.x | bash - && apt-get install --yes --no-install-recommends nodejs
      - run: make bootstrap
      - run: make lint

  build-web:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install --yes --no-install-recommends build-essential curl ruby ruby-dev pandoc zlib1g zlib1g-dev imagemagick
          curl -sL https://deb.nodesource.com/setup_14.x | bash - && apt-get install --yes --no-install-recommends nodejs
      - run: cd web && make bootstrap
      - run: cd web && make build

  build-api:
    docker:
      - image: node
    steps:
      - checkout
      - run: "true"

  build-api2:
    docker:
      - image: node
    steps:
      - checkout
      - run: npm ci --prefix api2
      - run: npm run --prefix api2 build

  prod-check:
    docker:
      - image: node
    steps:
      - checkout
      - setup_remote_docker
      - run: make prod-check

  deploy-api2:
    docker:
      - image: node
    steps:
      - checkout
      - run: npm ci --prefix api2
      - run: npm run --prefix api2 build
      - run: npm run --prefix api2 deploy -- --token "${FIREBASE_TOKEN}"
